"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const assertions_1 = require("aws-cdk-lib/assertions");
const website_stack_1 = require("../lib/website-stack");
/* eslint-disable @typescript-eslint/no-var-requires */
require("dotenv").config({ path: ".env.test" });
describe("MyWebsiteAppStack", () => {
    const app = new cdk.App();
    const websiteStack = new website_stack_1.MyWebsiteAppStack(app, "PersonalWebsite", {
        env: {
            account: process.env.CDK_DEFAULT_ACCOUNT,
            region: process.env.CDK_DEFAULT_REGION,
        },
        environment: "test",
        domainName: process.env.DOMAIN_NAME || "",
        bucketName: process.env.BUCKET_NAME || "",
    });
    const template = assertions_1.Template.fromStack(websiteStack);
    console.log(JSON.stringify(template));
    test("S3 buckets created", () => {
        // One for website and one for CloudFront logs
        template.resourceCountIs("AWS::S3::Bucket", 2);
    });
    test("S3 bucket name is env variable", () => {
        template.hasResourceProperties("AWS::S3::Bucket", {
            BucketName: process.env.BUCKET_NAME,
        });
    });
    test("Lambda Functions Created", () => {
        // 1 each for Read and Create blog posts
        // 2 for replacing CNAME and A records
        template.resourceCountIs("AWS::Lambda::Function", 4);
        template.hasResourceProperties("AWS::Lambda::Function", {
            Handler: "create.handler",
            Runtime: "nodejs16.x",
        });
        template.hasResourceProperties("AWS::Lambda::Function", {
            Handler: "read.handler",
            Runtime: "nodejs16.x",
        });
    });
    test("ACM Certificate Created", () => {
        template.resourceCountIs("AWS::CertificateManager::Certificate", 1);
        template.hasResourceProperties("AWS::CertificateManager::Certificate", {
            DomainName: process.env.DOMAIN_NAME,
            SubjectAlternativeNames: ["*." + process.env.DOMAIN_NAME],
        });
    });
    const hostedZoneName = "testing.";
    test("Route53 HostedZone is present", () => {
        template.resourceCountIs("AWS::Route53::HostedZone", 1);
        template.hasResourceProperties("AWS::Route53::HostedZone", {
            Name: hostedZoneName,
        });
    });
    test("Route53 RecordSets Created", () => {
        template.resourceCountIs("AWS::Route53::RecordSet", 2);
        template.hasResourceProperties("AWS::Route53::RecordSet", {
            Name: ["www", process.env.DOMAIN_NAME, hostedZoneName].join("."),
            Type: "CNAME",
        });
        template.hasResourceProperties("AWS::Route53::RecordSet", {
            Name: [process.env.DOMAIN_NAME, hostedZoneName].join("."),
            Type: "A",
        });
    });
    test("Route53 RecordSet Deleted", () => {
        // CNAME and alias A
        template.resourceCountIs("Custom::DeleteExistingRecordSet", 2);
    });
    test("Cloudfront Distribution Created", () => {
        template.resourceCountIs("AWS::CloudFront::Distribution", 1);
        template.hasResourceProperties("AWS::CloudFront::Distribution", {
            DistributionConfig: assertions_1.Match.objectLike({
                Aliases: [process.env.DOMAIN_NAME, "www." + process.env.DOMAIN_NAME],
                CacheBehaviors: assertions_1.Match.anyValue(),
                CustomErrorResponses: [
                    {
                        ErrorCode: 403,
                        ResponseCode: 403,
                        ResponsePagePath: "/index.html",
                    },
                    {
                        ErrorCode: 404,
                        ResponseCode: 404,
                        ResponsePagePath: "/404.html",
                    },
                ],
                DefaultCacheBehavior: assertions_1.Match.anyValue(),
                Enabled: true,
                HttpVersion: "http2",
                IPV6Enabled: true,
                Logging: assertions_1.Match.anyValue(),
                ViewerCertificate: {
                    AcmCertificateArn: assertions_1.Match.anyValue(),
                    MinimumProtocolVersion: "TLSv1.2_2018",
                    SslSupportMethod: "sni-only",
                },
            }),
        });
    });
    test("Cloudfront ResponseHeadersPolicy Created", () => {
        template.resourceCountIs("AWS::CloudFront::ResponseHeadersPolicy", 1);
    });
});
//# sourceMappingURL=data:application/json;base64,