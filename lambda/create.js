"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const dynamoDb = new aws_sdk_1.DynamoDB.DocumentClient();
/**
 * Handles POST requests to upsert DynamoDB BlogPosts table.
 *
 * @param {APIGatewayProxyEvent} event - The incoming API Gateway event.
 * @returns {Promise<APIGatewayProxyResult>} The API Gateway response.
 */
// eslint-disable-next-line max-len
exports.handler = async (event) => {
    try {
        if (!event.body) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "Blog post required" }),
            };
        }
        const requestBody = JSON.parse(event.body);
        // Validate required fields
        if (!requestBody.title || !requestBody.html) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "Title and HTML are required" }),
            };
        }
        // Determine if it's an update or create operation based on the presence of postId
        const isUpdate = requestBody.postId !== undefined;
        const timestamp = new Date().toISOString();
        const item = {
            // Use postId for update or timestamp for create
            postId: isUpdate ? requestBody.postId : timestamp,
            tags: requestBody.tags || [],
            title: requestBody.title,
            html: requestBody.html,
            created: isUpdate ? undefined : timestamp,
            updated: isUpdate ? timestamp : undefined,
        };
        const params = {
            TableName: "BlogPosts",
            Item: item,
        };
        // Perform the put operation to insert or update the item in DynamoDB
        await dynamoDb.put(params).promise();
        return {
            statusCode: isUpdate ? 200 : 201,
            body: JSON.stringify({
                message: isUpdate ? "Post updated" : "Post created",
            }),
        };
    }
    catch (error) {
        console.error("Error:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: "Internal Server Error" }),
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQW1DO0FBY25DLE1BQU0sUUFBUSxHQUFHLElBQUksa0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUUvQzs7Ozs7R0FLRztBQUNILG1DQUFtQztBQUNuQyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFDckIsS0FBMkIsRUFDSyxFQUFFO0lBQ2xDLElBQUksQ0FBQztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEIsT0FBTztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFDO2FBQ3hELENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0MsMkJBQTJCO1FBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzVDLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQzthQUNqRSxDQUFDO1FBQ0osQ0FBQztRQUVELGtGQUFrRjtRQUNsRixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQztRQUVsRCxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNDLE1BQU0sSUFBSSxHQUFhO1lBQ3JCLGdEQUFnRDtZQUNoRCxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQ2pELElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDNUIsS0FBSyxFQUFFLFdBQVcsQ0FBQyxLQUFLO1lBQ3hCLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSTtZQUN0QixPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDekMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTO1NBQzFDLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRztZQUNiLFNBQVMsRUFBRSxXQUFXO1lBQ3RCLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQztRQUVGLHFFQUFxRTtRQUNyRSxNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFckMsT0FBTztZQUNMLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRztZQUNoQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjO2FBQ3BELENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUvQixPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxDQUFDO1NBQ3pELENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREIgfSBmcm9tIFwiYXdzLXNka1wiO1xuaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5cbmludGVyZmFjZSBCbG9nUG9zdCB7XG4gIHBvc3RJZDogc3RyaW5nOyAvLyBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHBvc3RcbiAgdGFnczogc3RyaW5nW107IC8vIExpc3Qgb2YgdGFncyBhc3NvY2lhdGVkIHdpdGggdGhlIHBvc3RcbiAgdGl0bGU6IHN0cmluZzsgLy8gVGl0bGUgb2YgdGhlIGJsb2cgcG9zdFxuICBodG1sOiBzdHJpbmc7IC8vIEhUTUwgY29udGVudCBvZiB0aGUgYmxvZyBwb3N0XG4gIC8vIFRpbWVzdGFtcCB3aGVuIHRoZSBwb3N0IHdhcyBjcmVhdGVkIChvcHRpb25hbCBmb3IgdXBkYXRlcylcbiAgY3JlYXRlZD86IHN0cmluZztcbiAgLy8gVGltZXN0YW1wIHdoZW4gdGhlIHBvc3Qgd2FzIGxhc3QgdXBkYXRlZCAob3B0aW9uYWwgZm9yIGNyZWF0ZXMpXG4gIHVwZGF0ZWQ/OiBzdHJpbmc7XG59XG5cbmNvbnN0IGR5bmFtb0RiID0gbmV3IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5cbi8qKlxuICogSGFuZGxlcyBQT1NUIHJlcXVlc3RzIHRvIHVwc2VydCBEeW5hbW9EQiBCbG9nUG9zdHMgdGFibGUuXG4gKlxuICogQHBhcmFtIHtBUElHYXRld2F5UHJveHlFdmVudH0gZXZlbnQgLSBUaGUgaW5jb21pbmcgQVBJIEdhdGV3YXkgZXZlbnQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+fSBUaGUgQVBJIEdhdGV3YXkgcmVzcG9uc2UuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxuKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIWV2ZW50LmJvZHkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIkJsb2cgcG9zdCByZXF1aXJlZFwiIH0pLFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuXG4gICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgaWYgKCFyZXF1ZXN0Qm9keS50aXRsZSB8fCAhcmVxdWVzdEJvZHkuaHRtbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiVGl0bGUgYW5kIEhUTUwgYXJlIHJlcXVpcmVkXCIgfSksXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIERldGVybWluZSBpZiBpdCdzIGFuIHVwZGF0ZSBvciBjcmVhdGUgb3BlcmF0aW9uIGJhc2VkIG9uIHRoZSBwcmVzZW5jZSBvZiBwb3N0SWRcbiAgICBjb25zdCBpc1VwZGF0ZSA9IHJlcXVlc3RCb2R5LnBvc3RJZCAhPT0gdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IGl0ZW06IEJsb2dQb3N0ID0ge1xuICAgICAgLy8gVXNlIHBvc3RJZCBmb3IgdXBkYXRlIG9yIHRpbWVzdGFtcCBmb3IgY3JlYXRlXG4gICAgICBwb3N0SWQ6IGlzVXBkYXRlID8gcmVxdWVzdEJvZHkucG9zdElkIDogdGltZXN0YW1wLFxuICAgICAgdGFnczogcmVxdWVzdEJvZHkudGFncyB8fCBbXSxcbiAgICAgIHRpdGxlOiByZXF1ZXN0Qm9keS50aXRsZSxcbiAgICAgIGh0bWw6IHJlcXVlc3RCb2R5Lmh0bWwsXG4gICAgICBjcmVhdGVkOiBpc1VwZGF0ZSA/IHVuZGVmaW5lZCA6IHRpbWVzdGFtcCxcbiAgICAgIHVwZGF0ZWQ6IGlzVXBkYXRlID8gdGltZXN0YW1wIDogdW5kZWZpbmVkLFxuICAgIH07XG5cbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBUYWJsZU5hbWU6IFwiQmxvZ1Bvc3RzXCIsXG4gICAgICBJdGVtOiBpdGVtLFxuICAgIH07XG5cbiAgICAvLyBQZXJmb3JtIHRoZSBwdXQgb3BlcmF0aW9uIHRvIGluc2VydCBvciB1cGRhdGUgdGhlIGl0ZW0gaW4gRHluYW1vREJcbiAgICBhd2FpdCBkeW5hbW9EYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogaXNVcGRhdGUgPyAyMDAgOiAyMDEsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6IGlzVXBkYXRlID8gXCJQb3N0IHVwZGF0ZWRcIiA6IFwiUG9zdCBjcmVhdGVkXCIsXG4gICAgICB9KSxcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIgfSksXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==